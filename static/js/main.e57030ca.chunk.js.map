{"version":3,"sources":["components/constants/constants.js","components/TodoItem/TodoItem.js","components/Todos/TodoList.js","components/TodosFilter/TodosFilter.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["FILTER","TodoItem","todo","handleDelete","changeTodoTitle","todosToggler","useState","editing","setEditing","newTitle","setNewTitle","key","id","className","ClassNames","completed","type","checked","onChange","onDoubleClick","title","onClick","autoFocus","defaultValue","event","target","value","trimStart","onKeyDown","onBlur","TodoList","todos","filtredTodos","setTodos","filter","map","changedTodos","TodosFilter","setFilter","href","selected","TodoApp","newTodo","setNewTodo","uncompletedTodos","completedTodos","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","onSubmit","preventDefault","Date","placeholder","length","every","htmlFor","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e57030ca.chunk.js","sourcesContent":["export const FILTER = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React, { useState } from 'react';\nimport ClassNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({\n  todo,\n  handleDelete,\n  changeTodoTitle,\n  todosToggler,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n\n  const handleChange = (event) => {\n    setNewTitle(event.target.value.trimStart());\n  };\n\n  const handleEdit = (event) => {\n    if (event.key === 'Enter') {\n      changeTodoTitle(todo.id, newTitle);\n      if (!newTitle) {\n        handleDelete(todo.id);\n      }\n\n      setEditing(false);\n    }\n\n    if (event.key === 'Escape') {\n      setNewTitle(todo.title);\n      setEditing(false);\n    }\n  };\n\n  const handleSaveChanges = () => {\n    changeTodoTitle(todo.id, newTitle);\n\n    if (!newTitle) {\n      handleDelete(todo.id);\n    }\n\n    setEditing(false);\n  };\n\n  return (\n    <li\n      key={todo.id}\n      className={ClassNames({\n        completed: todo.completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => todosToggler(todo.id)}\n        />\n        <label\n          onDoubleClick={() => setEditing(true)}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => handleDelete(todo.id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={todo.title}\n          onChange={handleChange}\n          onKeyDown={handleEdit}\n          onBlur={handleSaveChanges}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n  changeTodoTitle: PropTypes.func.isRequired,\n  todosToggler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({ todos, filtredTodos, setTodos }) => {\n  const handleDelete = (id) => {\n    setTodos(filtredTodos.filter(todo => todo.id !== id));\n  };\n\n  const changeTodoTitle = (id, title) => {\n    setTodos(filtredTodos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        title,\n      };\n    }));\n  };\n\n  const todosToggler = (id) => {\n    const changedTodos = todos.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        completed: !todo.completed,\n      };\n    });\n\n    setTodos(changedTodos);\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {filtredTodos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          handleDelete={handleDelete}\n          changeTodoTitle={changeTodoTitle}\n          todosToggler={todosToggler}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  filtredTodos: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassNames from 'classnames';\n\nimport { FILTER } from '../constants/constants';\n\nexport const TodosFilter = ({ filter, setFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={ClassNames({\n          selected: filter === FILTER.all,\n        })}\n        onClick={() => setFilter(FILTER.all)}\n      >\n        {FILTER.all}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={ClassNames({\n          selected: filter === FILTER.active,\n        })}\n        onClick={() => setFilter(FILTER.active)}\n      >\n        {FILTER.active}\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={ClassNames({\n          selected: filter === FILTER.completed,\n        })}\n        onClick={() => setFilter(FILTER.completed)}\n      >\n        {FILTER.completed}\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { FILTER } from '../constants/constants';\nimport { TodoList } from '../Todos/TodoList';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport const TodoApp = () => {\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  const [filter, setFilter] = useState(FILTER.all);\n\n  const uncompletedTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const filtredTodos = todos.filter((todo) => {\n    switch (filter) {\n      case FILTER.active:\n        return !todo.completed;\n\n      case FILTER.completed:\n        return todo.completed;\n\n      default: return todo;\n    }\n  });\n\n  const todosToggler = (event) => {\n    const { checked } = event.target;\n\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: checked,\n    })));\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (newTodo) {\n      setTodos([\n        ...todos,\n        {\n          title: newTodo,\n          id: +new Date(),\n          completed: false,\n        },\n      ]);\n    }\n\n    setNewTodo('');\n  };\n\n  const handleChange = (event) => {\n    setNewTodo(event.target.value.trimStart());\n  };\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={newTodo}\n            onChange={handleChange}\n          />\n        </form>\n      </header>\n      {todos.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={todos.every(todo => todo.completed)}\n              onChange={todosToggler}\n            />\n            <label htmlFor=\"toggle-all\">\n              Mark all as complete\n            </label>\n\n            <TodoList\n              todos={todos}\n              filtredTodos={filtredTodos}\n              setTodos={setTodos}\n            />\n          </section>\n\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {(uncompletedTodos.length === 1)\n              && `${uncompletedTodos.length} item left`}\n              {(uncompletedTodos.length !== 1)\n              && `${uncompletedTodos.length} items left`}\n            </span>\n\n            <TodosFilter\n              filter={filter}\n              setFilter={setFilter}\n            />\n\n            {completedTodos.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"clear-completed\"\n                onClick={() => setTodos(uncompletedTodos)}\n              >\n                Clear completed\n              </button>\n            )}\n          </footer>\n        </>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <TodoApp />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}